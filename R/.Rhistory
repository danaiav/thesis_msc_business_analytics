par(mfrow=c(3,3))
keep = c()
for(i in 1:24){
a = true_existing[i]
keep = union (keep, c(a))}
keep
#As we can see they are the variables from 24 to 47 and these are the only sizes we are going to keep for the further analysis
total_500_final <- total_500_final[,-c(48:715)]
#Also we remove the other Fortune 500 variables since they will interfer in the outcome of the model and we keep only the variable we want to examine the Revenues
total_500_final$Market_Value <- NULL
total_500_final$Assets <- NULL
total_500_final$Ranking <- NULL
total_500_final$Total_SH_Equity <- NULL
total_500_final$The_page_opened <- NULL
summary(total_500_final)
names(total_500_final)
total_500_final$X15x12<- gsub("1","0", total_500_final$X15x12)
total_500_final$X15x12 <- gsub("2", "1", total_500_final$X15x12 )
total_500_final$X60x60<- gsub("1","0", total_500_final$X60x60)
total_500_final$X60x60 <- gsub("2", "1", total_500_final$X60x60 )
total_500_final$X15x75<- gsub("1","0", total_500_final$X15x75)
total_500_final$X15x75 <- gsub("2", "1", total_500_final$X15x75 )
total_500_final$X28x221<- gsub("1","0", total_500_final$X28x221)
total_500_final$X28x221 <- gsub("2", "1", total_500_final$X28x221 )
total_500_final$X41x192 <- gsub("1","0", total_500_final$X41x192 )
total_500_final$X41x192 <- gsub("2", "1", total_500_final$X41x192 )
total_500_final$X300x993 <- gsub("1","0", total_500_final$X300x993 )
total_500_final$X300x993 <- gsub("2", "1", total_500_final$X300x993 )
total_500_final$X160x233 <- gsub("1","0", total_500_final$X160x233 )
total_500_final$X160x233 <- gsub("2", "1", total_500_final$X160x233 )
total_500_final$X29x29 <- gsub("1","0", total_500_final$X29x29 )
total_500_final$X29x29 <- gsub("2", "1", total_500_final$X29x29 )
total_500_final$X300pxx1500px <- gsub("1","0", total_500_final$X300pxx1500px )
total_500_final$X300pxx1500px <- gsub("2", "1", total_500_final$X300pxx1500px )
total_500_final$X200pxx200px<- gsub("1","0", total_500_final$X200pxx200px )
total_500_final$X200pxx200px <- gsub("2", "1", total_500_final$X200pxx200px )
total_500_final$X292pxx292px <- gsub("1","0", total_500_final$X292pxx292px )
total_500_final$X292pxx292px <- gsub("2", "1", total_500_final$X292pxx292px )
total_500_final$X400x300 <- gsub("1","0", total_500_final$X400x300 )
total_500_final$X400x300 <- gsub("2", "1", total_500_final$X400x300 )
total_500_final$X115x223 <- gsub("1","0", total_500_final$X115x223 )
total_500_final$X115x223 <- gsub("2", "1", total_500_final$X115x223 )
total_500_final$X1279pxx984px <- gsub("1","0", total_500_final$X1279pxx984px )
total_500_final$X1279pxx984px<- gsub("2", "1", total_500_final$X1279pxx984px )
total_500_final$X8x15 <- gsub("1","0", total_500_final$X8x15 )
total_500_final$X8x15 <- gsub("2", "1", total_500_final$X8x15 )
total_500_final$X44x556 <- gsub("1","0", total_500_final$X44x556 )
total_500_final$X44x556 <- gsub("2", "1", total_500_final$X44x556 )
total_500_final$X1x1 <- gsub("1","0", total_500_final$X1x1 )
total_500_final$X1x1 <- gsub("2", "1", total_500_final$X1x1 )
total_500_final$autox100. <- gsub("1","0", total_500_final$autox100. )
total_500_final$autox100. <- gsub("2", "1", total_500_final$autox100. )
colnames(total_500_final)[24] <- "X100x100"
total_500_final$X800x1200 <- gsub("1","0", total_500_final$X800x1200 )
total_500_final$X800x1200 <- gsub("2", "1", total_500_final$X800x1200 )
total_500_final$X24pxx133px <- gsub("1","0", total_500_final$X24pxx133px )
total_500_final$X24pxx133px <- gsub("2", "1", total_500_final$X24pxx133px )
total_500_final$X21pxx173px <- gsub("1","0", total_500_final$X21pxx173px )
total_500_final$X21pxx173px <- gsub("2", "1", total_500_final$X21pxx173px )
total_500_final$X46x214 <- gsub("1","0", total_500_final$X46x214)
total_500_final$X46x214 <- gsub("2", "1", total_500_final$X46x214 )
total_500_final$X49x49 <- gsub("1","0", total_500_final$X49x49)
total_500_final$X49x49 <- gsub("2", "1", total_500_final$X49x49 )
total_500_final$X50x45 <- gsub("1","0", total_500_final$X50x45)
total_500_final$X50x45 <- gsub("2", "1", total_500_final$X50x45 )
for(i in 19:42){
total_500_final[,i] <- as.numeric(total_500_final[,i])}
#We split the set to training and test set
library(caret)
set.seed(20)
sampling_vector <- createDataPartition(total_500_final$Revenues, p = 0.70, list = FALSE)
total_500_final_train <- total_500_final[sampling_vector,]
total_500_final_test <- total_500_final[-sampling_vector,]
#We will try to create a regression model to see which of the variables of the websites play the most important part regarding the Ranking of the company.
#We create the empty lm model
model_null = lm(Revenues~1,data=total_500_final_train)
summary(model_null)
#####################################################################################################
#LASSO and Logistic Regression models
library(glmnet)
#We create a full model for the variable Ranking
full <- lm(Revenues~.,data=total_500_final_train)
summary(full)
x <- model.matrix(full) [,-1]
dim(x)
lasso <- glmnet (x, total_500_final_train$Revenues)
par(mfrow=c(1,1),no.readonly = TRUE)
plot(lasso, xvar='lambda', label=T)
lassob <- cv.glmnet(x,total_500_final_train$Revenues)
lassob$lambda.min
lassob$lambda.1se
plot(lassob)
#We see the coefficients for lamda min
blasso <- coef(lassob, s="lambda.min")
blasso
dim(blasso)
zblasso <- blasso[-1] * apply(x,2,sd)
zbolt <- coef (full) [-1] * apply (x,2,sd)
azbolt <- abs(zbolt)
sum(azbolt)
#since the sum is NA that means we have to substract some variables
# in order to find which variables to substract we run the coefficients and we see which of them has NA as result
coef(full)
#Now we create a new model with only the variables with coef different from NA
full_2 <- lm(Revenues~. - total.images - total.links - X1x1 - X21pxx173px - X49x49 - X200pxx200px - X1279pxx984px - X300pxx1500px - X160x233 -  X300x993 - X41x192 - X28x221 - X60x60,data=total_500_final_train)
summary(full_2)
x <- model.matrix(full_2) [,-c(18,22,28,26,34,32,33,42,37,38,39,40,52)]
dim(x)
lasso <- glmnet (x, total_500_final_train$Revenues)
plot(lasso, xvar='lambda', label=T)
lassob <- cv.glmnet(x,total_500_final_train$Revenues)
lassob$lambda.min
lassob$lambda.1se
plot(lassob)
#coefiecinets for lammda min
blasso <- coef(lassob, s="lambda.min")
blasso
dim(blasso)
zblasso <- blasso[-1] * apply(x,2,sd)
zbolt <- coef (full_2) [-1] * apply (x,2,sd)
azbolt <- abs(zbolt)
sum(azbolt)
s <- sum(abs(zblasso))/sum(abs(azbolt))
s
full_3 <- lm(Revenues~1 +number_of_errors +facebook +pinterest +youtube+ Flesh_Mesaure +Sentences +X8x15  +X44x556 +X800x1200 +X24pxx133px +X46x214 +X50x45 +X292pxx292px +X115x223 +X15x12  +.bmp +.jpg ,data=total_500_final_train)
summary(full_3)
ad_r_sq_f3 <- summary(full_3)$adj.r.squared
aic_f3 <- AIC(full_3)
plot(full_3,which=1:3)
##############################################
blassob <- coef(lassob, s="lambda.1se")
blassob
zblassob <- blassob[-1] * apply(x,2,sd)
zboltb <- coef (full_2) [-1] * apply (x,2,sd)
s <- sum(abs(zblassob))/sum(abs(zboltb))
s
#The model based on the lasso method by taking the lambda.1se is the null model only with the intercept
full_4 <- lm(Revenues~1 +X8x15  +X44x556 +X800x1200 +X24pxx133px +X46x214 +X50x45 +X292pxx292px +X115x223 +X15x12 ,data=total_500_final_train)
summary(full_4)
ad_r_sq_f4 <- summary(full_4)$adj.r.squared
aic_f4 <- AIC(full_4)
plot(full_4,which=1:3)
###############################################
#We use the "both" method to compare the full_3 model with the null model to see how many variables are indeed important
model_a <- step(model_null, scope = list(lower = model_null, upper=full_2), direction = "both")
summary(model_a)
ad_r_sq_ma <- summary(model_a)$adj.r.squared
aic_ma <- AIC(model_a)
plot(model_a,which=1:3)
################
#We compare the Adjusted R squares of the models and also the AIC of the models we created to find the best one
ad_r_sq_f3
ad_r_sq_f4
ad_r_sq_ma #BEST
#The best Adkusted R square is the one in model a (the closer to 1 the better)
aic_f3
aic_f4
aic_ma #Best
#The best AIC and the best Adjusted R square is for model ma
#######################################################################################################
par(mfrow=c(2,2))
Actual_Revenues<- total_500_final_test$Revenues
plot (Actual_Revenues, col = "blue")
###########################################
predictions_ma <- predict(model_a,total_500_final_test)
plot (predictions_ma, col = "Red",main = "Model a")
#####################################
predictions_full3 <- predict(full_3,total_500_final_test)
plot (predictions_full3, col = "Red",main = "Full_3 model")
#####################################
predictions_full4 <- predict(full_4,total_500_final_test)
plot (predictions_full4, col = "Red",main = "Full_4 model")
#####################################
#From the plots above we can see that the actual Revenues have a more smooth way of leveling up except from the Revenues of the #1 ranking company that are extremely high in relationship with the other sites.
#The prediction model that is more smooth is the model a which has as we said before the best Adjusted R Square and the best AIC price
names(total_500_final_train)
par(mfrow=c(1,1))
total_500_final_reg <- total_500_final_train[,c(1,41,21,30,43,20,10,53,27,45,3)]
cor(total_500_final_reg)
corrplot(cor(total_500_final_reg),method="number")
#We can see here that the variable x8x15 has a very high correlation with the variable x44x556 and also the variable X15x12 has also a very high correlation with the variable x400x300.
#So we can try creating a new model excluding the 2 variables that are correlated from each pair to see if there will be any improvement in the model
full_5 <- lm(Revenues~1 +X44x556 +X400x300 + .bmp + youtube +loading.time + X46x214 + .gif + number_of_errors ,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_5,which=1:3)
ad_r_sq_ma
adj_r_square_full5
aic_ma
aic_full5
#The adjusted R square and the aic are a little worse than before
#######################################################################################################
##################################################################################################
#Clustering
#Kmeans clustering
#Based on those results we will try to cluster the companies based on the results of the regression
set.seed(220)
clusters <- hclust(dist(total_500_final_reg[, 1]))
plot(clusters)
fortuneCluster <- kmeans(total_500_final_reg[, 1], 2, iter.max = 500,nstart = 1)
cluster <- table(fortuneCluster$cluster)
fortuneCluster$cluster <- as.factor(fortuneCluster$cluster)
ggplot(total_500_final_reg, aes(Revenues, loading.time, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, youtube, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, .gif, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, .bmp, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, X46x214, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, X15x12, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, X44x556, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, X400x300, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, X8x15, color = fortuneCluster$cluster)) + geom_point(size=3)
#From the clustering we can see that the variables do indeed devide the most high revenues from the smallest ones
summary(model_a)
#We can see from the model that the basic variable that effect a companys ranking
#is whether or not it has an image in size X15x12
#We will try to make a model that we will not take into consideration this variable at all just in order to see how it will explain the revenues
full_6 <- lm(Revenues~1 +X44x556 +X400x300 + .bmp + X8x15+ youtube +loading.time + X46x214 + .gif + number_of_errors ,data=total_500_final_train)
summary(full_6)
adj_r_square_full6 <- summary(full_6)$adj.r.squared
aic_full6 <- AIC(full_6)
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_6,which=1:3)
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full_6 <- predict(full_6,total_500_final_test)
plot (predictions_full_6, col = "Red",main = "Full_6 model")
#######################################################
predictions_full_5 <- predict(full_5,total_500_final_test)
plot (predictions_full_5, col = "Red",main = "Full_5 model")
adj_r_square_full5
aic_full5
adj_r_square_full6
aic_full6
#We can see that here the prediction of the new model is not as good as the previous one so now that we have checked this option as well we can conclude that the most important factors are the ones of model_a
summary(model_a)
#So we can try creating a new model includind only the 400x300 image size
full_5 <- lm(Revenues~1 +X400x300 + .bmp + youtube +loading.time + .gif + number_of_errors ,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_5,which=1:3)
ad_r_sq_ma
adj_r_square_full5
aic_ma
aic_full5
#The adjusted R square and the aic are a little worse than before
#So we can try creating a new model includind only the 400x300 image size
full_5 <- lm(Revenues~1 +X46x214 + .bmp + youtube +loading.time + .gif + number_of_errors ,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_5,which=1:3)
ad_r_sq_ma
adj_r_square_full5
aic_ma
aic_full5
#The adjusted R square and the aic are a little worse than before
#So we can try creating a new model includind only the 400x300 image size
full_5 <- lm(Revenues~1 +X400x300 + .bmp + youtube +loading.time + .gif + number_of_errors ,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
ad_r_sq_ma
adj_r_square_full5
aic_ma
aic_full5
#The adjusted R square and the aic are a little worse than before
#######################################################################################################
##################################################################################################
#Clustering
#Kmeans clustering
#Based on those results we will try to cluster the companies based on the results of the regression
set.seed(220)
clusters <- hclust(dist(total_500_final_reg[, 1]))
plot(clusters)
fortuneCluster <- kmeans(total_500_final_reg[, 1], 2, iter.max = 500,nstart = 1)
cluster <- table(fortuneCluster$cluster)
fortuneCluster$cluster <- as.factor(fortuneCluster$cluster)
ggplot(total_500_final_reg, aes(Revenues, loading.time, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, youtube, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, .gif, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, .bmp, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, X46x214, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, X15x12, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, X44x556, color = fortuneCluster$cluster)) + geom_point(size=3)
full_6 <- lm(Revenues~1 +X15x12 + .bmp + youtube +loading.time + .gif + number_of_errors ,data=total_500_final_train)
summary(full_6)
adj_r_square_full6 <- summary(full_6)$adj.r.squared
aic_full6 <- AIC(full_6)
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_6,which=1:3)
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full_6 <- predict(full_6,total_500_final_test)
plot (predictions_full_6, col = "Red",main = "Full_6 model")
#######################################################
predictions_full_5 <- predict(full_5,total_500_final_test)
plot (predictions_full_5, col = "Red",main = "Full_5 model")
adj_r_square_full5
aic_full5
adj_r_square_full6
aic_full6
adj_r_square_full5
aic_full5
adj_r_square_full6
aic_full6
names(total_500_final_reg)
par(mfrow=c(1,1))
total_500_final_reg_2 <- total_500_final_reg[,c(1,2,5,7,8,10,11)]
cor(total_500_final_reg_2)
corrplot(cor(total_500_final_reg_2),method="number")
#Now we create a new model with only the variables with coef different from NA
full_2 <- lm(Revenues~. - total.images - total.links - X1x1 - X21pxx173px - X49x49 - X200pxx200px - X1279pxx984px - X300pxx1500px - X160x233 -  X300x993 - X41x192 - X28x221 - X60x60,data=total_500_final_train)
summary(full_2)
aic_f <- AIC(full_2)
aic_f
x <- model.matrix(full_2) [,-c(18,22,28,26,34,32,33,42,37,38,39,40,52)]
dim(x)
name(x)
x <- model.matrix(full_2) [,-c(18,22,28,26,34,32,33,42,37,38,39,40,52)]
dim(x)
(x)
lasso <- glmnet (x, total_500_final_train$Revenues)
x <- model.matrix(full_2) [,-c(18,22,28,26,34,32,33,42,37,38,39,40,52)]
dim(x)
str(x)
lasso <- glmnet (x, total_500_final_train$Revenues)
x <- model.matrix(full_2) [,-c(18,22,28,26,34,32,33,42,37,38,39,40,52)]
dim(x)
plot(x)
lasso <- glmnet (x, total_500_final_train$Revenues)
#####################################################################################################
#LASSO and Logistic Regression models
library(glmnet)
#We create a full model for the variable Ranking
full <- lm(Revenues~.,data=total_500_final_train)
summary(full)
#######################################################################################################
par(mfrow=c(2,2))
Actual_Revenues<- total_500_final_test$Revenues
plot (Actual_Revenues, col = "blue",main ="True Prices")
###########################################
predictions_ma <- predict(model_a,total_500_final_test)
plot (predictions_ma, col = "Red",main = "Both method model")
#####################################
predictions_full3 <- predict(full_3,total_500_final_test)
plot (predictions_full3, col = "Red",main = "Lasso Min model")
#####################################
predictions_full4 <- predict(full_4,total_500_final_test)
plot (predictions_full4, col = "Red",main = "Lasso One SD model")
#####################################
#From the plots above we can see that the actual Revenues have a more smooth way of leveling up except from the Revenues of the #1 ranking company that are extremely high in relationship with the other sites.
#The prediction model that is more smooth is the model a which has as we said before the best Adjusted R Square and the best AIC price
names(total_500_final_reg)
par(mfrow=c(1,1))
total_500_final_reg_3 <- total_500_final_reg[,c(1,4,5,7,8,10,11)]
cor(total_500_final_reg_3)
corrplot(cor(total_500_final_reg_2),method="number")
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue",main = "Actual Revenues prices")
plot (predictions_ma, col = "Red",main = "Model Both method")
#####################################
predictions_full_6 <- predict(full_6,total_500_final_test)
plot (predictions_full_6, col = "Red",main = "Model from both method only image size 15x12")
#######################################################
predictions_full_5 <- predict(full_5,total_500_final_test)
plot (predictions_full_5, col = "Red",main = "Model from both method only image size 400x300")
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue",main = "Actual Revenues prices")
plot (predictions_ma, col = "Red",main = "Model Both method")
#####################################
predictions_full_6 <- predict(full_6,total_500_final_test)
plot (predictions_full_6, col = "Red",main = "Model only image size 15x12")
#######################################################
predictions_full_5 <- predict(full_5,total_500_final_test)
plot (predictions_full_5, col = "Red",main = "Model only image size 400x300")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
ggplot(data=total_500_final,aes(x=Revenues))+geom_histogram(binwidth=10, colour = "green", fill ="darkgreen")
#we upload the dataset
total_500 <- read.csv("~/GitHub/thesis_msc_business_analytics/Python/total_500_new.csv", sep=";", na.strings="n/a")
#we see how many observations and how many variables we have
dim(total_500)
#We create a subset to make some changes to the data
total_500_sub <- total_500
#Change the decimal point for the 4 variables
total_500_sub$Assets.. <- gsub(",", ".", total_500_sub$Assets.. )
total_500_sub$Market.value.. <- gsub(",", ".", total_500_sub$Market.value.. )
total_500_sub$Revenues.. <- gsub(",", ".", total_500_sub$Revenues.. )
total_500_sub$Total.Stockholder.Equity.. <- gsub(",", ".", total_500_sub$Total.Stockholder.Equity.. )
#Make the variables numeric
for(i in 1:18){
total_500_sub[,i] <- as.numeric(total_500_sub[,i])}
for(i in 20:38){
total_500_sub[,i] <- as.numeric(total_500_sub[,i])}
#We omit the nas from the analysis
total_500_final <- na.omit(total_500_sub)
#We rename variable X as Ranking
colnames(total_500_final)[1] <- "Ranking"
#Change the names of some variables to be more easily readable
colnames(total_500_final)[2] <- "Assets"
colnames(total_500_final)[3] <- "Market_Value"
colnames(total_500_final)[4] <- "Revenues"
colnames(total_500_final)[5] <- "Total_SH_Equity"
colnames(total_500_final)[38] <- "Profit_per_Revenue"
#Delete the variables we will not need
total_500_final$company <- NULL #company name
total_500_final$url<- NULL # company url
#we upload the libraries beneath that we will use in the analysis
library(ggplot2)
library(reshape2)
library(DAAG)
#Final number of observation and variables we will use
dim(total_500_final)
#two of the variables were nas
summary(total_500_final)
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
ggplot(data=total_500_final,aes(x=Revenues))+geom_histogram(binwidth=10, colour = "green", fill ="darkgreen")
ggplot(data=total_500_final,aes(x=Assets))+geom_histogram(binwidth=80, colour = "red", fill ="darkred")
ggplot(data=total_500_final,aes(x=Market_Value))+geom_histogram(binwidth=90, colour = "blue", fill ="darkblue")
ggplot(data=total_500_final,aes(x=Total_SH_Equity))+geom_histogram(binwidth=100, colour = "purple", fill ="pink")
ggplot(data=total_500_final,aes(x=Profit_per_Revenue))+geom_histogram(binwidth=5, colour = "purple", fill ="pink")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
ggplot(data=total_500_final,aes(x=Ranking))+geom_histogram(binwidth=25, colour = "green", fill ="purple")
ggplot(data=total_500_final,aes(x=Revenues))+geom_histogram(binwidth=10, colour = "green", fill ="darkgreen")
ggplot(data=total_500_final,aes(x=Assets))+geom_histogram(binwidth=80, colour = "red", fill ="darkred")
ggplot(data=total_500_final,aes(x=Market_Value))+geom_histogram(binwidth=90, colour = "blue", fill ="darkblue")
ggplot(data=total_500_final,aes(x=Total_SH_Equity))+geom_histogram(binwidth=100, colour = "purple", fill ="pink")
ggplot(data=total_500_final,aes(x=Profit_per_Revenue))+geom_histogram(binwidth=5, colour = "purple", fill ="pink")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
ggplot(data=total_500_final,aes(x=Ranking))+geom_histogram(binwidth=1, colour = "green", fill ="purple")
ggplot(data=total_500_final,aes(x=Revenues))+geom_histogram(binwidth=10, colour = "green", fill ="darkgreen")
ggplot(data=total_500_final,aes(x=Assets))+geom_histogram(binwidth=80, colour = "red", fill ="darkred")
ggplot(data=total_500_final,aes(x=Market_Value))+geom_histogram(binwidth=90, colour = "blue", fill ="darkblue")
ggplot(data=total_500_final,aes(x=Total_SH_Equity))+geom_histogram(binwidth=100, colour = "purple", fill ="pink")
ggplot(data=total_500_final,aes(x=Profit_per_Revenue))+geom_histogram(binwidth=5, colour = "purple", fill ="pink")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
ggplot(data=total_500_final,aes(x=Ranking))+geom_histogram(binwidth=50, colour = "green", fill ="purple")
ggplot(data=total_500_final,aes(x=Revenues))+geom_histogram(binwidth=10, colour = "green", fill ="darkgreen")
ggplot(data=total_500_final,aes(x=Assets))+geom_histogram(binwidth=80, colour = "red", fill ="darkred")
ggplot(data=total_500_final,aes(x=Market_Value))+geom_histogram(binwidth=90, colour = "blue", fill ="darkblue")
ggplot(data=total_500_final,aes(x=Total_SH_Equity))+geom_histogram(binwidth=100, colour = "purple", fill ="pink")
ggplot(data=total_500_final,aes(x=Profit_per_Revenue))+geom_histogram(binwidth=5, colour = "purple", fill ="pink")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
plot(total_500_final$Ranking)
ggplot(data=total_500_final,aes(x=Ranking))+geom_histogram(binwidth=50, colour = "green", fill ="purple")
ggplot(data=total_500_final,aes(x=Revenues))+geom_histogram(binwidth=10, colour = "green", fill ="darkgreen")
ggplot(data=total_500_final,aes(x=Assets))+geom_histogram(binwidth=80, colour = "red", fill ="darkred")
ggplot(data=total_500_final,aes(x=Market_Value))+geom_histogram(binwidth=90, colour = "blue", fill ="darkblue")
ggplot(data=total_500_final,aes(x=Total_SH_Equity))+geom_histogram(binwidth=100, colour = "purple", fill ="pink")
ggplot(data=total_500_final,aes(x=Profit_per_Revenue))+geom_histogram(binwidth=5, colour = "purple", fill ="pink")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
plot(total_500_final$Ranking)
ggplot(data=total_500_final,aes(x=Ranking))+geom_point(binwidth=50, colour = "green", fill ="purple")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
plot(total_500_final$Ranking)
ggplot(data=total_500_final,aes(x=Ranking))+geom_point(colour = "green", fill ="purple")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
plot(total_500_final$Ranking)
ggplot(data=total_500_final,aes(x=Ranking, y=Ranking))+geom_point(colour = "green", fill ="purple")
ggplot(data=total_500_final,aes(x=Revenues))+geom_histogram(binwidth=10, colour = "green", fill ="darkgreen")
ggplot(data=total_500_final,aes(x=Assets))+geom_histogram(binwidth=80, colour = "red", fill ="darkred")
ggplot(data=total_500_final,aes(x=Market_Value))+geom_histogram(binwidth=90, colour = "blue", fill ="darkblue")
ggplot(data=total_500_final,aes(x=Total_SH_Equity))+geom_histogram(binwidth=100, colour = "purple", fill ="pink")
ggplot(data=total_500_final,aes(x=Profit_per_Revenue))+geom_histogram(binwidth=5, colour = "purple", fill ="pink")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
plot(total_500_final$Ranking, col = "Red")
ggplot(data=total_500_final,aes(x=Revenues))+geom_histogram(binwidth=10, colour = "green", fill ="darkgreen")
ggplot(data=total_500_final,aes(x=Assets))+geom_histogram(binwidth=80, colour = "red", fill ="darkred")
ggplot(data=total_500_final,aes(x=Market_Value))+geom_histogram(binwidth=90, colour = "blue", fill ="darkblue")
ggplot(data=total_500_final,aes(x=Total_SH_Equity))+geom_histogram(binwidth=100, colour = "purple", fill ="pink")
ggplot(data=total_500_final,aes(x=Profit_per_Revenue))+geom_histogram(binwidth=5, colour = "purple", fill ="pink")
#######################################################################################################
#we first see the summary of the Fortune variables and then we create their histogram so as to have a
#good grasp of how they are distributed
plot(total_500_final$Ranking, col = "red")
ggplot(data=total_500_final,aes(x=Revenues))+geom_histogram(binwidth=10, colour = "green", fill ="darkgreen")
ggplot(data=total_500_final,aes(x=Assets))+geom_histogram(binwidth=80, colour = "red", fill ="darkred")
ggplot(data=total_500_final,aes(x=Market_Value))+geom_histogram(binwidth=90, colour = "blue", fill ="darkblue")
ggplot(data=total_500_final,aes(x=Total_SH_Equity))+geom_histogram(binwidth=100, colour = "purple", fill ="pink")
ggplot(data=total_500_final,aes(x=Profit_per_Revenue))+geom_histogram(binwidth=5, colour = "purple", fill ="pink")
