par(mfrow=c(1,1))
barplot(table(total_500_final$im_s_medium),col = "darkgreen", main="Medium images 0:NO, 1:YES")
###########################################################################################################
length(small)
total_500_final$im_s_small <- 0
for(y in 1:243){
k <- small[y]
for(i in 1:439){
total_500_final$im_s_small[i] <- total_500_final$im_s_small[i] + images_only_x[i,k]
}}
total_500_final$im_s_small <- total_500_final$im_s_small/length(small)
for(i in 1:439){
if (total_500_final$im_s_small[i] >1){
total_500_final$im_s_small[i] <- 1
}else{
total_500_final$im_s_small[i] <- 0 #they do not have images of this size
}
}
par(mfrow=c(1,1))
barplot(table(total_500_final$im_s_small),col = "red", main="Small images 0:NO, 1:YES")
###########################################################################################################
length(thumb)
total_500_final$im_s_thumbnail <- 0
for(y in 1:223){
k <- thumb[y]
for(i in 1:439){
total_500_final$im_s_thumbnail[i] <- total_500_final$im_s_thumbnail[i] + images_only_x[i,k]
}}
total_500_final$im_s_thumbnail <- total_500_final$im_s_thumbnail/length(thumb)
for(i in 1:439){
if (total_500_final$im_s_thumbnail[i] >1){
total_500_final$im_s_thumbnail[i] <- 1
}else{
total_500_final$im_s_thumbnail[i] <- 0 #they do not have images of this size
}
}
par(mfrow=c(1,1))
barplot(table(total_500_final$im_s_thumbnail),col = "blue", main="Thumbnail images 0:NO, 1:YES")
total_500_final <- total_500_final[,-c(22:726)]
names(total_500_final)
corrplot(total_500_final)
corrplot(cor(total_500_final),method="number")
total_500_final$Market_Value <- NULL
total_500_final$Assets <- NULL
total_500_final$Ranking <- NULL
total_500_final$total.links <- NULL
total_500_final$Total_SH_Equity <- NULL
total_500_final$The_page_opened <- NULL
corrplot(cor(total_500_final),method="number")
#We split the set to training and test set
library(caret)
set.seed(20)
sampling_vector <- createDataPartition(total_500_final$Revenues, p = 0.85, list = FALSE)
total_500_final_train <- total_500_final[sampling_vector,]
total_500_final_test <- total_500_final[-sampling_vector,]
#We will try to create a regression model to see which of the variables of the websites play the most important part regarding the Ranking of the company.
#We create the empty lm model
model_null = lm(Revenues~1,data=total_500_final_train)
summary(model_null)
#####################################################################################################
#LASSO and Logistic Regression models
library(glmnet)
#We create a full model for the variable Ranking
full <- lm(Revenues~.,data=total_500_final_train)
summary(full)
x <- model.matrix(full) [,-1]
dim(x)
lasso <- glmnet (x, total_500_final_train$Revenues)
par(mfrow=c(1,1),no.readonly = TRUE)
plot(lasso,label=T)
plot(lasso, xvar='lambda', label=T)
lassob <- cv.glmnet(x,total_500_final_train$Revenues)
lassob$lambda.min
lassob$lambda.1se
plot(lassob)
#We see the coefficients for lamda min
blasso <- coef(lassob, s="lambda.min")
blasso
dim(blasso)
zblasso <- blasso[-1] * apply(x,2,sd)
zbolt <- coef (full) [-1] * apply (x,2,sd)
azbolt <- abs(zbolt)
sum(azbolt)
#since the sum is NA that means we have to substract some variables
# in order to find which variables to substract we run the coefficients and we see which of them has NA as result
coef(full)
#Now we create a new model with only the variables with coef different from NA
full_2 <- lm(Revenues~. -im_s_large - total.images,data=total_500_final_train)
summary(full_2)
x <- model.matrix(full_2) [,-c(25,28)]
dim(x)
lasso <- glmnet (x, total_500_final_train$Revenues)
par(mfrow=c(1,1),no.readonly = TRUE)
plot(lasso,label=T)
plot(lasso, xvar='lambda', label=T)
lassob <- cv.glmnet(x,total_500_final_train$Revenues)
lassob$lambda.min
lassob$lambda.1se
plot(lassob)
#coefiecinets for lammda min
blasso <- coef(lassob, s="lambda.min")
blasso
dim(blasso)
zblasso <- blasso[-1] * apply(x,2,sd)
zbolt <- coef (full_2) [-1] * apply (x,2,sd)
azbolt <- abs(zbolt)
sum(azbolt)
s <- sum(abs(zblasso))/sum(abs(azbolt))
s
#The model based on the lasso method bu taking the lambda.min is
full_3 <- lm(Revenues~ external+instagram+youtube+.bmp+.jpe+im_s_medium+ im_s_verylarge+ im_s_thumbnail,data=total_500_final_train)
summary(full_3)
adj_r_square_full3 <- summary(full_3)$adj.r.squared
aic_full3 <- AIC(full_3)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_3,which=1:3)
##############################################
blassob <- coef(lassob, s="lambda.1se")
blassob
zblassob <- blassob[-1] * apply(x,2,sd)
zboltb <- coef (full_2) [-1] * apply (x,2,sd)
s <- sum(abs(zblassob))/sum(abs(zboltb))
s
#The model based on the lasso method bu taking the lambda.1se is
full_4 <- lm(Revenues~ im_s_verylarge+im_s_medium+ im_s_thumbnail,data=total_500_final_train)
summary(full_4)
adj_r_square_full4 <- summary(full_4)$adj.r.squared
aic_full4 <- AIC(full_4)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_4,which=1:3)
###############################################
#We use the "both" method to compare the full_3 model with the null model to see how many variables are indeed important
model_a <- step(model_null, scope = list(lower = model_null, upper=full), direction = "both")
coef <- round(summary(model_a)$coefficients,2)
summary(model_a)
ad_r_sq_ma <- summary(model_a)$adj.r.squared
aic_ma <- AIC(model_a)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(model_a,which=1:3)
################
#We compare the Adjusted R squares of the models and also the AIC of the models we created to find the best one
adj_r_square_full3
adj_r_square_full4
ad_r_sq_ma
#The best Adkusted R square is the one in full 3 (the closer to 1 the better)
aic_full3
aic_full4
aic_ma
#The best AIC is for full ma but the difference is not very big  in comparison to the full 3 model that has the best Adjusted R square
#######################################################################################################
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full3 <- predict(full_3,total_500_final_test)
plot (predictions_full3, col = "Red",main = "Full_3 model")
#####################################
predictions_full4 <- predict(full_4,total_500_final_test)
plot (predictions_full4, col = "Red",main = "Full_4 model")
#From the plots above we can see that the actual Revenues have a more smooth way of leveling up except from the Revenues of the #1 ranking company that are extremely high in relationship with the other sites.
#The prediction model that is more smooth is the model a which has as we said before the best Adjusted R Square and the best AIC price
###################################################################################################
#Clustering
#Based on those results we will try to cluster the companies based on the results of the regression
names(total_500_final_train)
total_500_final_reg <- total_500_final_train[,c(1,5,8,16,19,27,29,30,31)]
names(total_500_final_reg)
corrplot(cor(total_500_final_reg),method="number")
set.seed(220)
fortuneCluster <- kmeans(total_500_final_reg[, 1:9], 3, iter.max = 100,nstart = 1)
cluster <- table(fortuneCluster$cluster)
plot (cluster)
fortuneCluster$cluster <- as.factor(fortuneCluster$cluster)
ggplot(total_500_final_reg, aes(Revenues, external, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, im_s_verylarge, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, im_s_small, color = fortuneCluster$cluster)) + geom_point(size=3)
#We can see from the plots that the variable that plays the most important part on the creation of the clusters is the number are the number of external links.
par(mfrow=c(1,1))
corrplot(cor(total_500_final_reg),method="number")
full_5 <- lm(Revenues~ external+instagram+.bmp+.jpe+im_s_verylarge+im_s_thumbnail,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_5,which=1:3)
dev.off()
full_5 <- lm(Revenues~ external+instagram+.bmp+.jpe+im_s_verylarge+im_s_thumbnail,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_5,which=1:3)
ad_r_sq_ma
adj_r_square_full5
corrplot(cor(total_500_final_reg),method="number")
full_5 <- lm(Revenues~ external+instagram+.bmp+.jpe+im_s_medium+im_s_small+im_s_thumbnail,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_5,which=1:3)
ad_r_sq_ma
adj_r_square_full5
dev.off()
full_5 <- lm(Revenues~ external+instagram+.bmp+.jpe+im_s_medium+im_s_small+im_s_thumbnail,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_5,which=1:3)
ad_r_sq_ma
adj_r_square_full5
aic_ma
aic_full5
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full5 <- predict(full_5,total_500_final_test)
plot (predictions_full5, col = "Red",main = "Full_5 model")
dev.off()
full_6 <- lm(Revenues~ instagram+.bmp+.jpe+im_s_medium+im_s_small+im_s_thumbnail,data=total_500_final_train)
summary(full_6)
adj_r_square_full6 <- summary(full_6)$adj.r.squared
aic_full6 <- AIC(full_6)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_6,which=1:3)
ad_r_sq_ma
adj_r_square_full6
aic_ma
aic_full6
dev.off()
full_6 <- lm(Revenues~ instagram+.bmp+.jpe,data=total_500_final_train)
summary(full_6)
adj_r_square_full6 <- summary(full_6)$adj.r.squared
aic_full6 <- AIC(full_6)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_6,which=1:3)
ad_r_sq_ma
adj_r_square_full6
aic_ma
aic_full6
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full6 <- predict(full_6,total_500_final_test)
plot (predictions_full6, col = "Red",main = "Full_6 model")
dev.off()
full_6 <- lm(Revenues~ im_s_verylarge+instagram+.bmp+.jpe+im_s_medium+im_s_small+im_s_thumbnail,data=total_500_final_train)
summary(full_6)
adj_r_square_full6 <- summary(full_6)$adj.r.squared
aic_full6 <- AIC(full_6)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_6,which=1:3)
ad_r_sq_ma
adj_r_square_full6
aic_ma
aic_full6
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full5 <- predict(full_5,total_500_final_test)
plot (predictions_full5, col = "Red",main = "Full_5 model")
#####################################
predictions_full6 <- predict(full_6,total_500_final_test)
plot (predictions_full6, col = "Red",main = "Full_6 model")
summary(model_a)
dev.off()
full_5 <- lm(Revenues~ external+.bmp+.jpe+im_s_medium+im_s_small+im_s_thumbnail,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_5,which=1:3)
ad_r_sq_ma
adj_r_square_full5
aic_ma
aic_full5
names(total_500_final_train)
dev.off()
full_5 <- lm(Revenues~ external+instagram+.bmp+.jpe+im_s_medium+im_s_small+im_s_thumbnail,data=total_500_final_train)
summary(full_5)
adj_r_square_full5 <- summary(full_5)$adj.r.squared
aic_full5 <- AIC(full_5)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_5,which=1:3)
ad_r_sq_ma
adj_r_square_full5
aic_ma
aic_full5
#The adjusted R square and the aic are a little worse than before
#######################################################################################################
##################################################################################################
#Clustering
#Based on those results we will try to cluster the companies based on the results of the regression
names(total_500_final_train)
total_500_final_reg <- total_500_final_train[,c(1,5,8,16,19,27,29,30,31)]
set.seed(220)
fortuneCluster <- kmeans(total_500_final_reg[, 1:9], 3, iter.max = 100,nstart = 1)
cluster <- table(fortuneCluster$cluster)
plot (cluster)
fortuneCluster$cluster <- as.factor(fortuneCluster$cluster)
ggplot(total_500_final_reg, aes(Revenues, external, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, im_s_verylarge, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, im_s_small, color = fortuneCluster$cluster)) + geom_point(size=3)
#We can see from the plots that the variable that plays the most important part on the creation of the clusters is the number are the number of external links.
######################################################################################################
#So we can try to substract this variable to see how the model changes
dev.off()
full_6 <- lm(Revenues~ im_s_verylarge+instagram+.bmp+.jpe+im_s_medium+im_s_small+im_s_thumbnail,data=total_500_final_train)
summary(full_6)
adj_r_square_full6 <- summary(full_6)$adj.r.squared
aic_full6 <- AIC(full_6)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_6,which=1:3)
ad_r_sq_ma
adj_r_square_full6
aic_ma
aic_full6
##############################################################
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full5 <- predict(full_5,total_500_final_test)
plot (predictions_full5, col = "Red",main = "Full_5 model")
#####################################
predictions_full6 <- predict(full_6,total_500_final_test)
plot (predictions_full6, col = "Red",main = "Full_6 model")
#######################################################
#Full model 6 is very close to the model a but since the model a still has better adjusted r square and aic price we will conlude that this is the best model. Which gives us the variables (metrics of the site) that most affect the company's Revenues.
summary(model_a)
names(total_500_final_train)
names(total_500_final_train)
total_500_final_reg <- total_500_final_train[,c(1,5,16,19,27,29,30,31)]
set.seed(220)
fortuneCluster <- kmeans(total_500_final_reg[, 1:8], 3, iter.max = 100,nstart = 1)
cluster <- table(fortuneCluster$cluster)
plot (cluster)
fortuneCluster$cluster <- as.factor(fortuneCluster$cluster)
ggplot(total_500_final_reg, aes(Revenues, external, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, im_s_verylarge, color = fortuneCluster$cluster)) + geom_point(size=3)
ggplot(total_500_final_reg, aes(Revenues, im_s_small, color = fortuneCluster$cluster)) + geom_point(size=3)
#We can see from the plots that the variable that plays the most important part on the creation of the clusters is the number are the number of external links.
#So we can try to substract this variable to see how the model changes
dev.off()
full_6 <- lm(Revenues~ im_s_verylarge+instagram+.bmp+.jpe+im_s_medium+im_s_small+im_s_thumbnail,data=total_500_final_train)
summary(full_6)
adj_r_square_full6 <- summary(full_6)$adj.r.squared
aic_full6 <- AIC(full_6)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(full_6,which=1:3)
ad_r_sq_ma
adj_r_square_full6
aic_ma
aic_full6
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full5 <- predict(full_5,total_500_final_test)
plot (predictions_full5, col = "Red",main = "Full_5 model")
#####################################
predictions_full6 <- predict(full_6,total_500_final_test)
plot (predictions_full6, col = "Red",main = "Full_6 model")
#######################################################
#Full model 6 is very close to the model a but since the model a still has better adjusted r square and aic price we will conlude that this is the best model. Which gives us the variables (metrics of the site) that most affect the company's Revenues.
summary(model_a)
names(total_500_final_train)
full_no_im <- lm(Revenues~.-bmp-.dib-.gif-.jpe-.jpeg-.jpg-.png-.tif-.tiff-total.images-im_s_verylarge - im_s_large - im_s_medium -im_s_small - im_s_thumbnail,data=total_500_final_train)
full_no_im <- lm(Revenues~.-.bmp-.dib-.gif-.jpe-.jpeg-.jpg-.png-.tif-.tiff-total.images-im_s_verylarge - im_s_large - im_s_medium -im_s_small - im_s_thumbnail,data=total_500_final_train)
summary(full_no_im)
full_no_im <- lm(Revenues~.-.bmp-.dib-.gif-.jpe-.jpeg-.jpg-.png-.tif-.tiff-total.images-im_s_verylarge - im_s_large - im_s_medium -im_s_small - im_s_thumbnail,data=total_500_final_train)
model_b <- step(model_null, scope = list(lower = model_null, upper=full_no_im), direction = "both")
coefb <- round(summary(model_b)$coefficients,2)
summary(model_b)
ad_r_sq_mb <- summary(model_b)$adj.r.squared
aic_mb <- AIC(model_b)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(model_b,which=1:3)
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_model_b <- predict(model_b,total_500_final_test)
plot (predictions_model_b, col = "Red",main = "model_b model")
#####################################
predictions_full6 <- predict(full_6,total_500_final_test)
plot (predictions_full6, col = "Red",main = "Full_6 model")
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_model_b <- predict(model_b,total_500_final_test)
plot (predictions_model_b, col = "Red",main = "model_b model")
#####################################
predictions_full_no_im <- predict(full_no_im,total_500_final_test)
plot (predictions_full_no_im, col = "Red",main = "full_no_im model")
full_no_im <- lm(Revenues~.-.bmp-.dib-.gif-.jpe-.jpeg-.jpg-.png-.tif-.tiff-im_s_verylarge - im_s_large - im_s_medium -im_s_small - im_s_thumbnail,data=total_500_final_train)
model_b <- step(model_null, scope = list(lower = model_null, upper=full_no_im), direction = "both")
coefb <- round(summary(model_b)$coefficients,2)
summary(model_b)
ad_r_sq_mb <- summary(model_b)$adj.r.squared
aic_mb <- AIC(model_b)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
plot(model_b,which=1:3)
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_model_b <- predict(model_b,total_500_final_test)
plot (predictions_model_b, col = "Red",main = "model_b model")
#####################################
predictions_full_no_im <- predict(full_no_im,total_500_final_test)
plot (predictions_full_no_im, col = "Red",main = "full_no_im model")
model_a <- step(model_null, scope = list(lower = model_null, upper=full_3), direction = "both")
coef <- round(summary(model_a)$coefficients,2)
summary(model_a)
ad_r_sq_ma <- summary(model_a)$adj.r.squared
aic_ma <- AIC(model_a)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
dev.off()
plot(model_a,which=1:3)
################
#We compare the Adjusted R squares of the models and also the AIC of the models we created to find the best one
adj_r_square_full3
adj_r_square_full4
ad_r_sq_ma
#The best Adkusted R square is the one in full 3 (the closer to 1 the better)
aic_full3
aic_full4
aic_ma
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
dev.off()
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full3 <- predict(full_3,total_500_final_test)
plot (predictions_full3, col = "Red",main = "Full_3 model")
#####################################
predictions_full4 <- predict(full_4,total_500_final_test)
plot (predictions_full4, col = "Red",main = "Full_4 model")
model_a <- step(model_null, scope = list(lower = model_null, upper=full), direction = "both")
coef <- round(summary(model_a)$coefficients,2)
summary(model_a)
ad_r_sq_ma <- summary(model_a)$adj.r.squared
aic_ma <- AIC(model_a)
par(mfrow=c(1,1))
#We create the 2 basic plots so as to be able to explain the regression model
dev.off()
plot(model_a,which=1:3)
#We compare the Adjusted R squares of the models and also the AIC of the models we created to find the best one
adj_r_square_full3
adj_r_square_full4
ad_r_sq_ma
#The best Adkusted R square is the one in full 3 (the closer to 1 the better)
aic_full3
aic_full4
aic_ma
#The best AIC is for full ma but the difference is not very big  in comparison to the full 3 model that has the best Adjusted R square
#######################################################################################################
predictions_ma <- predict(model_a,total_500_final_test)
Actual_Revenues<- total_500_final_test$Revenues
dev.off()
par(mfrow=c(2,2))
plot (Actual_Revenues, col = "blue")
plot (predictions_ma, col = "Red",main = "Model A")
#####################################
predictions_full3 <- predict(full_3,total_500_final_test)
plot (predictions_full3, col = "Red",main = "Full_3 model")
#####################################
predictions_full4 <- predict(full_4,total_500_final_test)
plot (predictions_full4, col = "Red",main = "Full_4 model")
